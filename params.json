{"name":"Alpacaml","tagline":"A type-safe, fully asynchronous and encrypted SOCKS5 proxy","body":"Alpacaml\r\n========\r\nAlpacaml is a type-safe, Monadic, fully asynchronous and encrypted SOCKS5 proxy\r\nwritten in OCaml.\r\n\r\n###Build\r\n    corebuild -pkg async,core_extended,cryptokit client.native server.native\r\n\r\n###Credit to                                                                       \r\n* Jane Street's Core and Async library                                             \r\n* Xavier Leroy's Cryptokit                                                         \r\n* David Sheet's ocaml-libsodium                                                    \r\n* The *sine qua non* 9gag.com, without which I would have finished months earlier\r\n\r\n###TO-DO\r\n* Support for libsodium, AES-256-CFB, AES-256-OFB and ARCFour encryptions\r\n* Better encryption and decryption modules, more integrated with Async\r\n* UDP relay\r\n\r\n###FAQ\r\n**Q**: How asynchrony is achieved?\r\n\r\n**A**: In a Monadic way. Specifically, through Async.Deferred.\r\n\r\n**Q**: Why encryption? Encryption is not enforced in RFC1928.\r\n\r\n**A**: Because f*ck GFW. That's why.\r\n\r\n**Q**: Why not Node.js?\r\n\r\n**A**: Because f*ck Node.js. Alpaca also shows its indifference to Node.js:\r\n\r\n![pic](https://lh6.googleusercontent.com/-XlW6F95vMBU/U_w8rjY7trI/AAAAAAAABOw/WPfHuVuxQxQ/w852-h764/alpaca_loop_nodejs.gif)\r\n\r\n### License\r\nGPL V3\r\n\r\n===\r\n### Alpaca\r\n\r\n*The habits of spitting and trampling are probably defence mechanisms of the \r\nanimals against outside aggression, real or potential.*\r\n\r\n-- [UN FAO Manual for ALPACA RAISING IN THE HIGH ANDES, Behavioural characteristics](http://www.fao.org/docrep/004/x6500e/x6500e21.htm)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}